Terminals which are not used

   BOOLEAN
   KW_DOTS


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENT ';' declarations_e subprogram_declarations_e compound_statement '.'

    2 identifier_list: IDENT
    3                | identifier_list ',' IDENT

    4 declarations_e: declarations
    5               | /* empty */

    6 declarations: declarations VAR identifier_list ':' type ';'
    7             | VAR identifier_list ':' type ';'

    8 type: standard_type
    9     | ARRAY '[' INTEGER ';' INTEGER ']' OF standard_type

   10 standard_type: KW_INTEGER
   11              | KW_REAL
   12              | KW_BOOLEAN
   13              | KW_CHAR
   14              | KW_STRING

   15 subprogram_declarations_e: subprogram_declarations
   16                          | /* empty */

   17 subprogram_declarations: subprogram_declarations subprogram_declaration
   18                        | subprogram_declaration

   19 subprogram_declaration: subprogram_head compound_statement return_stmt ';'

   20 return_stmt: KW_RETURN variable
   21            | /* empty */

   22 @1: /* empty */

   23 subprogram_head: FUNCTION IDENT @1 arguments ':' standard_type ';' declarations_e

   24 @2: /* empty */

   25 subprogram_head: PROCEDURE IDENT @2 arguments ';' declarations_e

   26 arguments: '(' parameter_list ')'
   27          | /* empty */

   28 parameter_list: identifier_list ':' type
   29               | parameter_list ';' identifier_list ':' type

   30 compound_statement: KW_BEGIN statement_list_e KW_END

   31 statement_list_e: statement_list
   32                 | /* empty */

   33 statement_list: statement_list statement
   34               | statement

   35 statement: variable ASSIGN expression ';'
   36          | procedure_statement ';'
   37          | compound_statement ';'
   38          | KW_IF expression KW_THEN compound_statement ';'
   39          | KW_IF expression KW_THEN compound_statement ';' KW_ELSE compound_statement ';'
   40          | KW_WHILE expression KW_DO compound_statement ';'
   41          | KW_FOR IDENT ASSIGN CHAR KW_TO CHAR KW_DO compound_statement ';'
   42          | KW_FOR IDENT ASSIGN INTEGER KW_TO INTEGER KW_DO compound_statement ';'
   43          | WRITE '(' STRING ')' ';'
   44          | WRITE '(' IDENT ')' ';'
   45          | WRITE '(' expression unary_operator expression ')' ';'

   46 variable: IDENT
   47         | IDENT '[' expression ']'

   48 procedure_statement: IDENT
   49                    | IDENT '(' expression_list ')'

   50 expression_list: expression
   51                | expression_list ',' expression

   52 expression: IDENT
   53           | INTEGER
   54           | REAL
   55           | CHAR
   56           | STRING
   57           | KW_TRUE
   58           | KW_FALSE
   59           | IDENT '(' expression_list ')'
   60           | '(' expression ')'
   61           | expression unary_operator expression
   62           | NOT expression

   63 unary_operator: '+'
   64               | '-'
   65               | '*'
   66               | '/'
   67               | DIV
   68               | '<'
   69               | '>'
   70               | SE
   71               | LE
   72               | EQ
   73               | NEQ
   74               | AND
   75               | OR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 26 43 44 45 49 59 60
')' (41) 26 43 44 45 49 59 60
'*' (42) 65
'+' (43) 63
',' (44) 3 51
'-' (45) 64
'.' (46) 1
'/' (47) 66
':' (58) 6 7 23 28 29
';' (59) 1 6 7 9 19 23 25 29 35 36 37 38 39 40 41 42 43 44 45
'<' (60) 68
'>' (62) 69
'[' (91) 9 47
']' (93) 9 47
error (256)
PROGRAM (258) 1
IDENT (259) 1 2 3 23 25 41 42 44 46 47 48 49 52 59
INTEGER (260) 9 42 53
REAL (261) 54
BOOLEAN (262)
STRING (263) 43 56
CHAR (264) 41 55
KW_INTEGER (265) 10
KW_REAL (266) 11
KW_BOOLEAN (267) 12
KW_CHAR (268) 13
KW_STRING (269) 14
WRITE (270) 43 44 45
KW_IF (271) 38 39
KW_ELSE (272) 39
KW_THEN (273) 38 39
KW_WHILE (274) 40
KW_DO (275) 40 41 42
KW_END (276) 30
KW_BEGIN (277) 30
KW_TRUE (278) 57
KW_FALSE (279) 58
KW_TO (280) 41 42
KW_FOR (281) 41 42
FUNCTION (282) 23
KW_RETURN (283) 20
PROCEDURE (284) 25
VAR (285) 6 7
ARRAY (286) 9
NOT (287) 62
OF (288) 9
AND (289) 74
OR (290) 75
DIV (291) 67
EQ (292) 72
NEQ (293) 73
LE (294) 71
SE (295) 70
ASSIGN (296) 35 41 42
KW_DOTS (297)
dec_e (298)
OPP1 (299)
OP (300)
IFPREC (301)
prog (302)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
program (63)
    on left: 1, on right: 0
identifier_list (64)
    on left: 2 3, on right: 3 6 7 28 29
declarations_e (65)
    on left: 4 5, on right: 1 23 25
declarations (66)
    on left: 6 7, on right: 4 6
type (67)
    on left: 8 9, on right: 6 7 28 29
standard_type (68)
    on left: 10 11 12 13 14, on right: 8 9 23
subprogram_declarations_e (69)
    on left: 15 16, on right: 1
subprogram_declarations (70)
    on left: 17 18, on right: 15 17
subprogram_declaration (71)
    on left: 19, on right: 17 18
return_stmt (72)
    on left: 20 21, on right: 19
subprogram_head (73)
    on left: 23 25, on right: 19
@1 (74)
    on left: 22, on right: 23
@2 (75)
    on left: 24, on right: 25
arguments (76)
    on left: 26 27, on right: 23 25
parameter_list (77)
    on left: 28 29, on right: 26 29
compound_statement (78)
    on left: 30, on right: 1 19 37 38 39 40 41 42
statement_list_e (79)
    on left: 31 32, on right: 30
statement_list (80)
    on left: 33 34, on right: 31 33
statement (81)
    on left: 35 36 37 38 39 40 41 42 43 44 45, on right: 33 34
variable (82)
    on left: 46 47, on right: 20 35
procedure_statement (83)
    on left: 48 49, on right: 36
expression_list (84)
    on left: 50 51, on right: 49 51 59
expression (85)
    on left: 52 53 54 55 56 57 58 59 60 61 62, on right: 35 38 39 40
    45 47 50 51 60 61 62
unary_operator (86)
    on left: 63 64 65 66 67 68 69 70 71 72 73 74 75,
    on right: 45 61


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . IDENT ';' declarations_e subprogram_declarations_e compound_statement '.'

    IDENT  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: PROGRAM IDENT . ';' declarations_e subprogram_declarations_e compound_statement '.'

    ';'  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: PROGRAM IDENT ';' . declarations_e subprogram_declarations_e compound_statement '.'

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (declarations_e)

    declarations_e  go to state 7
    declarations    go to state 8


state 6

    7 declarations: VAR . identifier_list ':' type ';'

    IDENT  shift, and go to state 9

    identifier_list  go to state 10


state 7

    1 program: PROGRAM IDENT ';' declarations_e . subprogram_declarations_e compound_statement '.'

    FUNCTION   shift, and go to state 11
    PROCEDURE  shift, and go to state 12

    $default  reduce using rule 16 (subprogram_declarations_e)

    subprogram_declarations_e  go to state 13
    subprogram_declarations    go to state 14
    subprogram_declaration     go to state 15
    subprogram_head            go to state 16


state 8

    4 declarations_e: declarations .
    6 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 17

    $default  reduce using rule 4 (declarations_e)


state 9

    2 identifier_list: IDENT .

    $default  reduce using rule 2 (identifier_list)


state 10

    3 identifier_list: identifier_list . ',' IDENT
    7 declarations: VAR identifier_list . ':' type ';'

    ','  shift, and go to state 18
    ':'  shift, and go to state 19


state 11

   23 subprogram_head: FUNCTION . IDENT @1 arguments ':' standard_type ';' declarations_e

    IDENT  shift, and go to state 20


state 12

   25 subprogram_head: PROCEDURE . IDENT @2 arguments ';' declarations_e

    IDENT  shift, and go to state 21


state 13

    1 program: PROGRAM IDENT ';' declarations_e subprogram_declarations_e . compound_statement '.'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 23


state 14

   15 subprogram_declarations_e: subprogram_declarations .
   17 subprogram_declarations: subprogram_declarations . subprogram_declaration

    FUNCTION   shift, and go to state 11
    PROCEDURE  shift, and go to state 12

    $default  reduce using rule 15 (subprogram_declarations_e)

    subprogram_declaration  go to state 24
    subprogram_head         go to state 16


state 15

   18 subprogram_declarations: subprogram_declaration .

    $default  reduce using rule 18 (subprogram_declarations)


state 16

   19 subprogram_declaration: subprogram_head . compound_statement return_stmt ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 25


state 17

    6 declarations: declarations VAR . identifier_list ':' type ';'

    IDENT  shift, and go to state 9

    identifier_list  go to state 26


state 18

    3 identifier_list: identifier_list ',' . IDENT

    IDENT  shift, and go to state 27


state 19

    7 declarations: VAR identifier_list ':' . type ';'

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32
    ARRAY       shift, and go to state 33

    type           go to state 34
    standard_type  go to state 35


state 20

   23 subprogram_head: FUNCTION IDENT . @1 arguments ':' standard_type ';' declarations_e

    $default  reduce using rule 22 (@1)

    @1  go to state 36


state 21

   25 subprogram_head: PROCEDURE IDENT . @2 arguments ';' declarations_e

    $default  reduce using rule 24 (@2)

    @2  go to state 37


state 22

   30 compound_statement: KW_BEGIN . statement_list_e KW_END

    IDENT     shift, and go to state 38
    WRITE     shift, and go to state 39
    KW_IF     shift, and go to state 40
    KW_WHILE  shift, and go to state 41
    KW_BEGIN  shift, and go to state 22
    KW_FOR    shift, and go to state 42

    $default  reduce using rule 32 (statement_list_e)

    compound_statement   go to state 43
    statement_list_e     go to state 44
    statement_list       go to state 45
    statement            go to state 46
    variable             go to state 47
    procedure_statement  go to state 48


state 23

    1 program: PROGRAM IDENT ';' declarations_e subprogram_declarations_e compound_statement . '.'

    '.'  shift, and go to state 49


state 24

   17 subprogram_declarations: subprogram_declarations subprogram_declaration .

    $default  reduce using rule 17 (subprogram_declarations)


state 25

   19 subprogram_declaration: subprogram_head compound_statement . return_stmt ';'

    KW_RETURN  shift, and go to state 50

    $default  reduce using rule 21 (return_stmt)

    return_stmt  go to state 51


state 26

    3 identifier_list: identifier_list . ',' IDENT
    6 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 18
    ':'  shift, and go to state 52


state 27

    3 identifier_list: identifier_list ',' IDENT .

    $default  reduce using rule 3 (identifier_list)


state 28

   10 standard_type: KW_INTEGER .

    $default  reduce using rule 10 (standard_type)


state 29

   11 standard_type: KW_REAL .

    $default  reduce using rule 11 (standard_type)


state 30

   12 standard_type: KW_BOOLEAN .

    $default  reduce using rule 12 (standard_type)


state 31

   13 standard_type: KW_CHAR .

    $default  reduce using rule 13 (standard_type)


state 32

   14 standard_type: KW_STRING .

    $default  reduce using rule 14 (standard_type)


state 33

    9 type: ARRAY . '[' INTEGER ';' INTEGER ']' OF standard_type

    '['  shift, and go to state 53


state 34

    7 declarations: VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 54


state 35

    8 type: standard_type .

    $default  reduce using rule 8 (type)


state 36

   23 subprogram_head: FUNCTION IDENT @1 . arguments ':' standard_type ';' declarations_e

    '('  shift, and go to state 55

    $default  reduce using rule 27 (arguments)

    arguments  go to state 56


state 37

   25 subprogram_head: PROCEDURE IDENT @2 . arguments ';' declarations_e

    '('  shift, and go to state 55

    $default  reduce using rule 27 (arguments)

    arguments  go to state 57


state 38

   46 variable: IDENT .
   47         | IDENT . '[' expression ']'
   48 procedure_statement: IDENT .
   49                    | IDENT . '(' expression_list ')'

    '('  shift, and go to state 58
    '['  shift, and go to state 59

    ';'       reduce using rule 48 (procedure_statement)
    $default  reduce using rule 46 (variable)


state 39

   43 statement: WRITE . '(' STRING ')' ';'
   44          | WRITE . '(' IDENT ')' ';'
   45          | WRITE . '(' expression unary_operator expression ')' ';'

    '('  shift, and go to state 60


state 40

   38 statement: KW_IF . expression KW_THEN compound_statement ';'
   39          | KW_IF . expression KW_THEN compound_statement ';' KW_ELSE compound_statement ';'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 70


state 41

   40 statement: KW_WHILE . expression KW_DO compound_statement ';'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 71


state 42

   41 statement: KW_FOR . IDENT ASSIGN CHAR KW_TO CHAR KW_DO compound_statement ';'
   42          | KW_FOR . IDENT ASSIGN INTEGER KW_TO INTEGER KW_DO compound_statement ';'

    IDENT  shift, and go to state 72


state 43

   37 statement: compound_statement . ';'

    ';'  shift, and go to state 73


state 44

   30 compound_statement: KW_BEGIN statement_list_e . KW_END

    KW_END  shift, and go to state 74


state 45

   31 statement_list_e: statement_list .
   33 statement_list: statement_list . statement

    IDENT     shift, and go to state 38
    WRITE     shift, and go to state 39
    KW_IF     shift, and go to state 40
    KW_WHILE  shift, and go to state 41
    KW_BEGIN  shift, and go to state 22
    KW_FOR    shift, and go to state 42

    $default  reduce using rule 31 (statement_list_e)

    compound_statement   go to state 43
    statement            go to state 75
    variable             go to state 47
    procedure_statement  go to state 48


state 46

   34 statement_list: statement .

    $default  reduce using rule 34 (statement_list)


state 47

   35 statement: variable . ASSIGN expression ';'

    ASSIGN  shift, and go to state 76


state 48

   36 statement: procedure_statement . ';'

    ';'  shift, and go to state 77


state 49

    1 program: PROGRAM IDENT ';' declarations_e subprogram_declarations_e compound_statement '.' .

    $default  reduce using rule 1 (program)


state 50

   20 return_stmt: KW_RETURN . variable

    IDENT  shift, and go to state 78

    variable  go to state 79


state 51

   19 subprogram_declaration: subprogram_head compound_statement return_stmt . ';'

    ';'  shift, and go to state 80


state 52

    6 declarations: declarations VAR identifier_list ':' . type ';'

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32
    ARRAY       shift, and go to state 33

    type           go to state 81
    standard_type  go to state 35


state 53

    9 type: ARRAY '[' . INTEGER ';' INTEGER ']' OF standard_type

    INTEGER  shift, and go to state 82


state 54

    7 declarations: VAR identifier_list ':' type ';' .

    $default  reduce using rule 7 (declarations)


state 55

   26 arguments: '(' . parameter_list ')'

    IDENT  shift, and go to state 9

    identifier_list  go to state 83
    parameter_list   go to state 84


state 56

   23 subprogram_head: FUNCTION IDENT @1 arguments . ':' standard_type ';' declarations_e

    ':'  shift, and go to state 85


state 57

   25 subprogram_head: PROCEDURE IDENT @2 arguments . ';' declarations_e

    ';'  shift, and go to state 86


state 58

   49 procedure_statement: IDENT '(' . expression_list ')'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression_list  go to state 87
    expression       go to state 88


state 59

   47 variable: IDENT '[' . expression ']'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 89


state 60

   43 statement: WRITE '(' . STRING ')' ';'
   44          | WRITE '(' . IDENT ')' ';'
   45          | WRITE '(' . expression unary_operator expression ')' ';'

    IDENT     shift, and go to state 90
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 91
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 92


state 61

   52 expression: IDENT .
   59           | IDENT . '(' expression_list ')'

    '('  shift, and go to state 93

    $default  reduce using rule 52 (expression)


state 62

   53 expression: INTEGER .

    $default  reduce using rule 53 (expression)


state 63

   54 expression: REAL .

    $default  reduce using rule 54 (expression)


state 64

   56 expression: STRING .

    $default  reduce using rule 56 (expression)


state 65

   55 expression: CHAR .

    $default  reduce using rule 55 (expression)


state 66

   57 expression: KW_TRUE .

    $default  reduce using rule 57 (expression)


state 67

   58 expression: KW_FALSE .

    $default  reduce using rule 58 (expression)


state 68

   62 expression: NOT . expression

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 94


state 69

   60 expression: '(' . expression ')'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 95


state 70

   38 statement: KW_IF expression . KW_THEN compound_statement ';'
   39          | KW_IF expression . KW_THEN compound_statement ';' KW_ELSE compound_statement ';'
   61 expression: expression . unary_operator expression

    KW_THEN  shift, and go to state 96
    AND      shift, and go to state 97
    OR       shift, and go to state 98
    DIV      shift, and go to state 99
    EQ       shift, and go to state 100
    NEQ      shift, and go to state 101
    LE       shift, and go to state 102
    SE       shift, and go to state 103
    '>'      shift, and go to state 104
    '<'      shift, and go to state 105
    '-'      shift, and go to state 106
    '+'      shift, and go to state 107
    '*'      shift, and go to state 108
    '/'      shift, and go to state 109

    unary_operator  go to state 110


state 71

   40 statement: KW_WHILE expression . KW_DO compound_statement ';'
   61 expression: expression . unary_operator expression

    KW_DO  shift, and go to state 111
    AND    shift, and go to state 97
    OR     shift, and go to state 98
    DIV    shift, and go to state 99
    EQ     shift, and go to state 100
    NEQ    shift, and go to state 101
    LE     shift, and go to state 102
    SE     shift, and go to state 103
    '>'    shift, and go to state 104
    '<'    shift, and go to state 105
    '-'    shift, and go to state 106
    '+'    shift, and go to state 107
    '*'    shift, and go to state 108
    '/'    shift, and go to state 109

    unary_operator  go to state 110


state 72

   41 statement: KW_FOR IDENT . ASSIGN CHAR KW_TO CHAR KW_DO compound_statement ';'
   42          | KW_FOR IDENT . ASSIGN INTEGER KW_TO INTEGER KW_DO compound_statement ';'

    ASSIGN  shift, and go to state 112


state 73

   37 statement: compound_statement ';' .

    $default  reduce using rule 37 (statement)


state 74

   30 compound_statement: KW_BEGIN statement_list_e KW_END .

    $default  reduce using rule 30 (compound_statement)


state 75

   33 statement_list: statement_list statement .

    $default  reduce using rule 33 (statement_list)


state 76

   35 statement: variable ASSIGN . expression ';'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 113


state 77

   36 statement: procedure_statement ';' .

    $default  reduce using rule 36 (statement)


state 78

   46 variable: IDENT .
   47         | IDENT . '[' expression ']'

    '['  shift, and go to state 59

    $default  reduce using rule 46 (variable)


state 79

   20 return_stmt: KW_RETURN variable .

    $default  reduce using rule 20 (return_stmt)


state 80

   19 subprogram_declaration: subprogram_head compound_statement return_stmt ';' .

    $default  reduce using rule 19 (subprogram_declaration)


state 81

    6 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 114


state 82

    9 type: ARRAY '[' INTEGER . ';' INTEGER ']' OF standard_type

    ';'  shift, and go to state 115


state 83

    3 identifier_list: identifier_list . ',' IDENT
   28 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 18
    ':'  shift, and go to state 116


state 84

   26 arguments: '(' parameter_list . ')'
   29 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 117
    ';'  shift, and go to state 118


state 85

   23 subprogram_head: FUNCTION IDENT @1 arguments ':' . standard_type ';' declarations_e

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32

    standard_type  go to state 119


state 86

   25 subprogram_head: PROCEDURE IDENT @2 arguments ';' . declarations_e

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (declarations_e)

    declarations_e  go to state 120
    declarations    go to state 8


state 87

   49 procedure_statement: IDENT '(' expression_list . ')'
   51 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 121
    ','  shift, and go to state 122


state 88

   50 expression_list: expression .
   61 expression: expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    $default  reduce using rule 50 (expression_list)

    unary_operator  go to state 110


state 89

   47 variable: IDENT '[' expression . ']'
   61 expression: expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    ']'  shift, and go to state 123
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    unary_operator  go to state 110


state 90

   44 statement: WRITE '(' IDENT . ')' ';'
   52 expression: IDENT .
   59           | IDENT . '(' expression_list ')'

    '('  shift, and go to state 93
    ')'  shift, and go to state 124

    $default  reduce using rule 52 (expression)


state 91

   43 statement: WRITE '(' STRING . ')' ';'
   56 expression: STRING .

    ')'  shift, and go to state 125

    $default  reduce using rule 56 (expression)


state 92

   45 statement: WRITE '(' expression . unary_operator expression ')' ';'
   61 expression: expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    unary_operator  go to state 126


state 93

   59 expression: IDENT '(' . expression_list ')'

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression_list  go to state 127
    expression       go to state 88


state 94

   61 expression: expression . unary_operator expression
   62           | NOT expression .

    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 62 (expression)

    unary_operator  go to state 110


state 95

   60 expression: '(' expression . ')'
   61           | expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    ')'  shift, and go to state 128
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    unary_operator  go to state 110


state 96

   38 statement: KW_IF expression KW_THEN . compound_statement ';'
   39          | KW_IF expression KW_THEN . compound_statement ';' KW_ELSE compound_statement ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 129


state 97

   74 unary_operator: AND .

    $default  reduce using rule 74 (unary_operator)


state 98

   75 unary_operator: OR .

    $default  reduce using rule 75 (unary_operator)


state 99

   67 unary_operator: DIV .

    $default  reduce using rule 67 (unary_operator)


state 100

   72 unary_operator: EQ .

    $default  reduce using rule 72 (unary_operator)


state 101

   73 unary_operator: NEQ .

    $default  reduce using rule 73 (unary_operator)


state 102

   71 unary_operator: LE .

    $default  reduce using rule 71 (unary_operator)


state 103

   70 unary_operator: SE .

    $default  reduce using rule 70 (unary_operator)


state 104

   69 unary_operator: '>' .

    $default  reduce using rule 69 (unary_operator)


state 105

   68 unary_operator: '<' .

    $default  reduce using rule 68 (unary_operator)


state 106

   64 unary_operator: '-' .

    $default  reduce using rule 64 (unary_operator)


state 107

   63 unary_operator: '+' .

    $default  reduce using rule 63 (unary_operator)


state 108

   65 unary_operator: '*' .

    $default  reduce using rule 65 (unary_operator)


state 109

   66 unary_operator: '/' .

    $default  reduce using rule 66 (unary_operator)


state 110

   61 expression: expression unary_operator . expression

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 130


state 111

   40 statement: KW_WHILE expression KW_DO . compound_statement ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 131


state 112

   41 statement: KW_FOR IDENT ASSIGN . CHAR KW_TO CHAR KW_DO compound_statement ';'
   42          | KW_FOR IDENT ASSIGN . INTEGER KW_TO INTEGER KW_DO compound_statement ';'

    INTEGER  shift, and go to state 132
    CHAR     shift, and go to state 133


state 113

   35 statement: variable ASSIGN expression . ';'
   61 expression: expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    ';'  shift, and go to state 134

    unary_operator  go to state 110


state 114

    6 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 6 (declarations)


state 115

    9 type: ARRAY '[' INTEGER ';' . INTEGER ']' OF standard_type

    INTEGER  shift, and go to state 135


state 116

   28 parameter_list: identifier_list ':' . type

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32
    ARRAY       shift, and go to state 33

    type           go to state 136
    standard_type  go to state 35


state 117

   26 arguments: '(' parameter_list ')' .

    $default  reduce using rule 26 (arguments)


state 118

   29 parameter_list: parameter_list ';' . identifier_list ':' type

    IDENT  shift, and go to state 9

    identifier_list  go to state 137


state 119

   23 subprogram_head: FUNCTION IDENT @1 arguments ':' standard_type . ';' declarations_e

    ';'  shift, and go to state 138


state 120

   25 subprogram_head: PROCEDURE IDENT @2 arguments ';' declarations_e .

    $default  reduce using rule 25 (subprogram_head)


state 121

   49 procedure_statement: IDENT '(' expression_list ')' .

    $default  reduce using rule 49 (procedure_statement)


state 122

   51 expression_list: expression_list ',' . expression

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 139


state 123

   47 variable: IDENT '[' expression ']' .

    $default  reduce using rule 47 (variable)


state 124

   44 statement: WRITE '(' IDENT ')' . ';'

    ';'  shift, and go to state 140


state 125

   43 statement: WRITE '(' STRING ')' . ';'

    ';'  shift, and go to state 141


state 126

   45 statement: WRITE '(' expression unary_operator . expression ')' ';'
   61 expression: expression unary_operator . expression

    IDENT     shift, and go to state 61
    INTEGER   shift, and go to state 62
    REAL      shift, and go to state 63
    STRING    shift, and go to state 64
    CHAR      shift, and go to state 65
    KW_TRUE   shift, and go to state 66
    KW_FALSE  shift, and go to state 67
    NOT       shift, and go to state 68
    '('       shift, and go to state 69

    expression  go to state 142


state 127

   51 expression_list: expression_list . ',' expression
   59 expression: IDENT '(' expression_list . ')'

    ')'  shift, and go to state 143
    ','  shift, and go to state 122


state 128

   60 expression: '(' expression ')' .

    $default  reduce using rule 60 (expression)


state 129

   38 statement: KW_IF expression KW_THEN compound_statement . ';'
   39          | KW_IF expression KW_THEN compound_statement . ';' KW_ELSE compound_statement ';'

    ';'  shift, and go to state 144


state 130

   61 expression: expression . unary_operator expression
   61           | expression unary_operator expression .

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    $default  reduce using rule 61 (expression)

    unary_operator  go to state 110


state 131

   40 statement: KW_WHILE expression KW_DO compound_statement . ';'

    ';'  shift, and go to state 145


state 132

   42 statement: KW_FOR IDENT ASSIGN INTEGER . KW_TO INTEGER KW_DO compound_statement ';'

    KW_TO  shift, and go to state 146


state 133

   41 statement: KW_FOR IDENT ASSIGN CHAR . KW_TO CHAR KW_DO compound_statement ';'

    KW_TO  shift, and go to state 147


state 134

   35 statement: variable ASSIGN expression ';' .

    $default  reduce using rule 35 (statement)


state 135

    9 type: ARRAY '[' INTEGER ';' INTEGER . ']' OF standard_type

    ']'  shift, and go to state 148


state 136

   28 parameter_list: identifier_list ':' type .

    $default  reduce using rule 28 (parameter_list)


state 137

    3 identifier_list: identifier_list . ',' IDENT
   29 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 18
    ':'  shift, and go to state 149


state 138

   23 subprogram_head: FUNCTION IDENT @1 arguments ':' standard_type ';' . declarations_e

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (declarations_e)

    declarations_e  go to state 150
    declarations    go to state 8


state 139

   51 expression_list: expression_list ',' expression .
   61 expression: expression . unary_operator expression

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    $default  reduce using rule 51 (expression_list)

    unary_operator  go to state 110


state 140

   44 statement: WRITE '(' IDENT ')' ';' .

    $default  reduce using rule 44 (statement)


state 141

   43 statement: WRITE '(' STRING ')' ';' .

    $default  reduce using rule 43 (statement)


state 142

   45 statement: WRITE '(' expression unary_operator expression . ')' ';'
   61 expression: expression . unary_operator expression
   61           | expression unary_operator expression .

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    DIV  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    LE   shift, and go to state 102
    SE   shift, and go to state 103
    '>'  shift, and go to state 104
    '<'  shift, and go to state 105
    ')'  shift, and go to state 151
    '-'  shift, and go to state 106
    '+'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    unary_operator  go to state 110


state 143

   59 expression: IDENT '(' expression_list ')' .

    $default  reduce using rule 59 (expression)


state 144

   38 statement: KW_IF expression KW_THEN compound_statement ';' .
   39          | KW_IF expression KW_THEN compound_statement ';' . KW_ELSE compound_statement ';'

    KW_ELSE  shift, and go to state 152

    $default  reduce using rule 38 (statement)


state 145

   40 statement: KW_WHILE expression KW_DO compound_statement ';' .

    $default  reduce using rule 40 (statement)


state 146

   42 statement: KW_FOR IDENT ASSIGN INTEGER KW_TO . INTEGER KW_DO compound_statement ';'

    INTEGER  shift, and go to state 153


state 147

   41 statement: KW_FOR IDENT ASSIGN CHAR KW_TO . CHAR KW_DO compound_statement ';'

    CHAR  shift, and go to state 154


state 148

    9 type: ARRAY '[' INTEGER ';' INTEGER ']' . OF standard_type

    OF  shift, and go to state 155


state 149

   29 parameter_list: parameter_list ';' identifier_list ':' . type

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32
    ARRAY       shift, and go to state 33

    type           go to state 156
    standard_type  go to state 35


state 150

   23 subprogram_head: FUNCTION IDENT @1 arguments ':' standard_type ';' declarations_e .

    $default  reduce using rule 23 (subprogram_head)


state 151

   45 statement: WRITE '(' expression unary_operator expression ')' . ';'

    ';'  shift, and go to state 157


state 152

   39 statement: KW_IF expression KW_THEN compound_statement ';' KW_ELSE . compound_statement ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 158


state 153

   42 statement: KW_FOR IDENT ASSIGN INTEGER KW_TO INTEGER . KW_DO compound_statement ';'

    KW_DO  shift, and go to state 159


state 154

   41 statement: KW_FOR IDENT ASSIGN CHAR KW_TO CHAR . KW_DO compound_statement ';'

    KW_DO  shift, and go to state 160


state 155

    9 type: ARRAY '[' INTEGER ';' INTEGER ']' OF . standard_type

    KW_INTEGER  shift, and go to state 28
    KW_REAL     shift, and go to state 29
    KW_BOOLEAN  shift, and go to state 30
    KW_CHAR     shift, and go to state 31
    KW_STRING   shift, and go to state 32

    standard_type  go to state 161


state 156

   29 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 29 (parameter_list)


state 157

   45 statement: WRITE '(' expression unary_operator expression ')' ';' .

    $default  reduce using rule 45 (statement)


state 158

   39 statement: KW_IF expression KW_THEN compound_statement ';' KW_ELSE compound_statement . ';'

    ';'  shift, and go to state 162


state 159

   42 statement: KW_FOR IDENT ASSIGN INTEGER KW_TO INTEGER KW_DO . compound_statement ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 163


state 160

   41 statement: KW_FOR IDENT ASSIGN CHAR KW_TO CHAR KW_DO . compound_statement ';'

    KW_BEGIN  shift, and go to state 22

    compound_statement  go to state 164


state 161

    9 type: ARRAY '[' INTEGER ';' INTEGER ']' OF standard_type .

    $default  reduce using rule 9 (type)


state 162

   39 statement: KW_IF expression KW_THEN compound_statement ';' KW_ELSE compound_statement ';' .

    $default  reduce using rule 39 (statement)


state 163

   42 statement: KW_FOR IDENT ASSIGN INTEGER KW_TO INTEGER KW_DO compound_statement . ';'

    ';'  shift, and go to state 165


state 164

   41 statement: KW_FOR IDENT ASSIGN CHAR KW_TO CHAR KW_DO compound_statement . ';'

    ';'  shift, and go to state 166


state 165

   42 statement: KW_FOR IDENT ASSIGN INTEGER KW_TO INTEGER KW_DO compound_statement ';' .

    $default  reduce using rule 42 (statement)


state 166

   41 statement: KW_FOR IDENT ASSIGN CHAR KW_TO CHAR KW_DO compound_statement ';' .

    $default  reduce using rule 41 (statement)
